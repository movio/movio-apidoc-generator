/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 */
package com.bryzek.apidoc.reference.api.v0 {

  object Constants {

    val UserAgent = "apidoc:play_2x_client:unknown"
    val Version = "0.0.1-dev"
    val VersionMajor = 0

  }

  /** Play Client
    *
    * For details on config see - https://www.playframework.com/documentation/2.4.x/ScalaWS
    *
    * @param apiUrl the server/host/port to connect to, eg `http://localhost:9000`
    * @param auth if auth is used
    * @param defaultHeaders to be sent with all requests
    * @param autoClose if the client is used within a Play App this setting isn't used. Play will manage
    *        the settings and client. If used outside a Play app a client with settings must be created.
    *        `autoClose = true` means that a new client will be created for every request, this includes
    *        parsing the configuration. The client will close the connection for you.
    *        If `autoClose = false` one connnection will be made when the class is instantiated. You are
    *        responsible for closing the connection.
    */
  class Client(
    apiUrl: String,
    auth: scala.Option[com.bryzek.apidoc.reference.api.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil,
    autoClose: Boolean = true // Set to false for better perf or lots or request. You must manually call `close`
  ) {
    import com.bryzek.apidoc.reference.api.v0.models.json._

    private[this] val logger = play.api.Logger("com.bryzek.apidoc.reference.api.v0.Client")

    logger.info(s"Initializing com.bryzek.apidoc.reference.api.v0.Client for url $apiUrl")

    val client = play.api.Play.maybeApplication match {
      case Some(_) => // Don't need a client when in a play app
        logger.trace("Play app found - using that it to configure play client")
        None
      case None =>
        autoClose match {
          case true => // Don't need a client, we'll create one for each request
            logger.trace("Auto close set - will create a new connection for each request")
            None
          case false =>
            logger.trace("Auto close not set - creating a new client - will need to be closed manually")
            val builder = new com.ning.http.client.AsyncHttpClientConfig.Builder()
            Some(new play.api.libs.ws.ning.NingWSClient(builder.build()))
        }
    }

    def echoes: Echoes = Echoes

    def groups: Groups = Groups

    def members: Members = Members

    def organizations: Organizations = Organizations

    def users: Users = Users

    object Echoes extends Echoes {
      override def get(
        foo: _root_.scala.Option[String] = None,
        optionalMessages: _root_.scala.Option[Seq[String]] = None,
        requiredMessages: Seq[String]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          foo.map("foo" -> _)
        ).flatten ++
          optionalMessages.getOrElse(Nil).map("optional_messages" -> _) ++
          requiredMessages.map("required_messages" -> _)

        _executeRequest("GET", s"/echoes", queryParameters = queryParameters).map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def getArraysOnly(
        optionalMessages: _root_.scala.Option[Seq[String]] = None,
        requiredMessages: Seq[String]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = optionalMessages.getOrElse(Nil).map("optional_messages" -> _) ++
          requiredMessages.map("required_messages" -> _)

        _executeRequest("GET", s"/echoes/arrays-only", queryParameters = queryParameters).map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Groups extends Groups {
      override def getByOrganization(
        organization: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]] = {
        _executeRequest("GET", s"/groups/${organization}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]", r, _.validate[Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Members extends Members {
      override def post(
        guid: _root_.java.util.UUID,
        organization: _root_.java.util.UUID,
        user: _root_.java.util.UUID,
        role: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Member] = {
        val payload = play.api.libs.json.Json.obj(
          "guid" -> play.api.libs.json.Json.toJson(guid),
          "organization" -> play.api.libs.json.Json.toJson(organization),
          "user" -> play.api.libs.json.Json.toJson(user),
          "role" -> play.api.libs.json.Json.toJson(role)
        )

        _executeRequest("POST", s"/members", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.Member", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.Member])
          case r if r.status == 409 => throw new com.bryzek.apidoc.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          organizationGuid.map("organization_guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _)
        ).flatten

        _executeRequest("GET", s"/members", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByOrganization(
        organization: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        _executeRequest("GET", s"/members/${organization}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postMembersBulkByOrganization(
        organization: _root_.java.util.UUID,
        members: Seq[com.bryzek.apidoc.reference.api.v0.models.Member]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        val payload = play.api.libs.json.Json.toJson(members)

        _executeRequest("POST", s"/members/${organization}/members_bulk", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postMembersMapByOrganization(
        organization: _root_.java.util.UUID,
        members: Map[String, com.bryzek.apidoc.reference.api.v0.models.Member]
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]] = {
        val payload = play.api.libs.json.Json.toJson(members)

        _executeRequest("POST", s"/members/${organization}/members_map", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Member]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Organizations extends Organizations {
      override def post(
        organization: com.bryzek.apidoc.reference.api.v0.models.Organization
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.obj(
          "organization" -> play.api.libs.json.Json.toJson(organization)
        )

        _executeRequest("POST", s"/organizations", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.Organization])
          case r if r.status == 409 => throw new com.bryzek.apidoc.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        name: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          name.map("name" -> _)
        ).flatten

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization] = {
        _executeRequest("GET", s"/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.Organization])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Users extends Users {
      override def post(
        guid: _root_.java.util.UUID,
        email: String,
        active: Boolean
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.obj(
          "guid" -> play.api.libs.json.Json.toJson(guid),
          "email" -> play.api.libs.json.Json.toJson(email),
          "active" -> play.api.libs.json.Json.toJson(active)
        )

        _executeRequest("POST", s"/users", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("com.bryzek.apidoc.reference.api.v0.models.User", r, _.validate[com.bryzek.apidoc.reference.api.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.apidoc.reference.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationGuids: _root_.scala.Option[Seq[Long]] = None,
        ageGroup: _root_.scala.Option[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] = None,
        email: _root_.scala.Option[String] = None,
        active: Boolean = true
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          ageGroup.map("age_group" -> _.toString),
          email.map("email" -> _),
          Some("active" -> active.toString)
        ).flatten ++
          organizationGuids.getOrElse(Nil).map("organization_guids" -> _.toString)

        _executeRequest("GET", s"/users", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.User]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.User]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByAgeGroup(
        ageGroup: com.bryzek.apidoc.reference.api.v0.models.AgeGroup
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(ageGroup.toString, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.User]", r, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.User]])
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postNoop()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/users/noop").map {
          case r if r.status == 200 => ()
          case r => throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      val url:play.api.libs.ws.WSRequest = play.api.Play.maybeApplication match {
        case Some(app) => // We have a running Play App use built in client for url
          import play.api.Play.current
          play.api.libs.ws.WS.url(apiUrl + path)
        case None =>
          val builder = new com.ning.http.client.AsyncHttpClientConfig.Builder()
          client match {
            case Some(c) => // using existing client
              c.url(apiUrl + path)
            case None => // we need to create a new client for each request
              val c = new play.api.libs.ws.ning.NingWSClient(builder.build())
              c.url(apiUrl + path)
          }
      }

      val holder = url.withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)

      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      headers: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      val result = method.toUpperCase match {
        case "GET" => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest("GET", request).get()
        }
        case "POST" => {
          val allHeaders = ("Content-Type" -> "application/json; charset=UTF-8") +: headers
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(allHeaders:_*)
          _logRequest("POST", request).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          val allHeaders = ("Content-Type" -> "application/json; charset=UTF-8") +: headers
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(allHeaders:_*)
          val payload = body.getOrElse(play.api.libs.json.Json.obj())
          _logRequest("PUT", request).put(payload)
        }
        case "PATCH" => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          val payload = body.getOrElse(play.api.libs.json.Json.obj())
          _logRequest("PATCH", request).patch(payload)
        }
        case "DELETE" => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest("DELETE", request).delete()
        }
         case "HEAD" => {
           val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest("HEAD", request).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)).options()
        }
        case _ => {
          val request = _requestHolder(path).withQueryString(queryParameters:_*).withHeaders(headers:_*)
          _logRequest(method, request)
          sys.error("Unsupported method[%s]".format(method))
        }
      }
      // Close connection if needed
      result.onComplete {
        case _ => //
          client match {
            case Some(c) =>
              if (autoClose) {
                logger.trace("Auto closing client connection")
                c.close
              }
            case _ => // No client - don't need to close
          }
      }
      result
    }

    def close(): Unit = {
      client match {
        case Some(c) =>
          if (! autoClose)
            c.close
          else
            throw new RuntimeException("Connection set to autoClose - do not call close")
        case None =>
          throw new RuntimeException("Connection managed by the running Play App - do not call close")
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.bryzek.apidoc.reference.api.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Echoes {
    def get(
      foo: _root_.scala.Option[String] = None,
      optionalMessages: _root_.scala.Option[Seq[String]] = None,
      requiredMessages: Seq[String]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def getArraysOnly(
      optionalMessages: _root_.scala.Option[Seq[String]] = None,
      requiredMessages: Seq[String]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Groups {
    def getByOrganization(
      organization: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, Seq[com.bryzek.apidoc.reference.api.v0.models.User]]]
  }

  trait Members {
    def post(
      guid: _root_.java.util.UUID,
      organization: _root_.java.util.UUID,
      user: _root_.java.util.UUID,
      role: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Member]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]

    def getByOrganization(
      organization: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]

    def postMembersBulkByOrganization(
      organization: _root_.java.util.UUID,
      members: Seq[com.bryzek.apidoc.reference.api.v0.models.Member]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]

    def postMembersMapByOrganization(
      organization: _root_.java.util.UUID,
      members: Map[String, com.bryzek.apidoc.reference.api.v0.models.Member]
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Member]]
  }

  trait Organizations {
    def post(
      organization: com.bryzek.apidoc.reference.api.v0.models.Organization
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      name: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.Organization]]

    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.Organization]
  }

  trait Users {
    def post(
      guid: _root_.java.util.UUID,
      email: String,
      active: Boolean
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.reference.api.v0.models.User]

    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationGuids: _root_.scala.Option[Seq[Long]] = None,
      ageGroup: _root_.scala.Option[com.bryzek.apidoc.reference.api.v0.models.AgeGroup] = None,
      email: _root_.scala.Option[String] = None,
      active: Boolean = true
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]]

    def getByAgeGroup(
      ageGroup: com.bryzek.apidoc.reference.api.v0.models.AgeGroup
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.reference.api.v0.models.User]]

    def postNoop()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import com.bryzek.apidoc.reference.api.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.com.bryzek.apidoc.reference.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.reference.api.v0.models.Error]", response, _.validate[Seq[com.bryzek.apidoc.reference.api.v0.models.Error]])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}
