/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 */
package com.gilt.quality.v0.models {

  case class AdjournForm(
    adjournedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  /**
   * Describe an agenda item for a meeting. Currently the only agenda items we have
   * are that a particular incident needs to be reviewed.
   */
  case class AgendaItem(
    id: Long,
    meeting: com.gilt.quality.v0.models.Meeting,
    incident: com.gilt.quality.v0.models.Incident,
    task: com.gilt.quality.v0.models.Task
  )

  case class AgendaItemForm(
    meetingId: Long,
    incidentId: Long,
    task: com.gilt.quality.v0.models.Task
  )

  case class AuthenticationForm(
    email: String
  )

  case class EmailMessage(
    subject: String,
    body: String
  )

  case class Error(
    code: String,
    message: String
  )

  /**
   * Stores metadata about external services that can be integrated with the quality
   * app
   */
  case class ExternalService(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    name: com.gilt.quality.v0.models.ExternalServiceName,
    url: String,
    username: String
  )

  case class ExternalServiceForm(
    name: com.gilt.quality.v0.models.ExternalServiceName,
    url: String,
    username: String,
    password: String
  )

  /**
   * Every n days (e.g. 30) we follow up to see if a given plan has been implemented.
   * This gives teams the ability to say: Yes, completed. Not yet. or No, won't do.
   * After 3 consecutive no replies, we assume not doing.
   */
  case class Followup(
    key: String,
    plan: com.gilt.quality.v0.models.Plan,
    sentAt: _root_.org.joda.time.DateTime
  )

  /**
   * Every n days (e.g. 30) we follow up to see if a given plan has been implemented.
   * This gives teams the ability to say: Yes, completed. Not yet. or No, won't do.
   * After 3 consecutive no replies, we assume not doing.
   */
  case class FollowupResponse(
    followup: com.gilt.quality.v0.models.Followup,
    response: com.gilt.quality.v0.models.Response,
    createdAt: _root_.org.joda.time.DateTime,
    createdBy: com.gilt.quality.v0.models.User
  )

  case class Healthcheck(
    status: String
  )

  /**
   * URLs to key icons used through the application
   */
  case class Icons(
    smileyUrl: String,
    frownyUrl: String
  )

  /**
   * A bug or error that affected public or internal users in a negative way
   */
  case class Incident(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    summary: String,
    description: _root_.scala.Option[String] = None,
    team: _root_.scala.Option[com.gilt.quality.v0.models.Team] = None,
    severity: com.gilt.quality.v0.models.Severity,
    tags: _root_.scala.Option[Seq[String]] = None,
    plan: _root_.scala.Option[com.gilt.quality.v0.models.Plan] = None,
    createdAt: _root_.org.joda.time.DateTime
  )

  case class IncidentForm(
    teamKey: _root_.scala.Option[String] = None,
    severity: com.gilt.quality.v0.models.Severity,
    summary: String,
    description: _root_.scala.Option[String] = None,
    tags: _root_.scala.Option[Seq[String]] = None
  )

  /**
   * Used to move an incident to another organization
   */
  case class IncidentOrganizationChange(
    incidentId: Long,
    organizationKey: String
  )

  case class IncidentSummary(
    id: Long,
    severity: com.gilt.quality.v0.models.Severity,
    summary: String
  )

  /**
   * Meetings happen on a regular schedule (e.g. thursdays from 11-12 EST). As
   * incidents are created, they are automatically assigned to the next meeting.
   * Incidents can then be reviewed from the context of a meeting, facilitating
   * online navigation. Incidents within a meeting can require one of two actions -
   * team assignment or plan review.
   */
  case class Meeting(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    scheduledAt: _root_.org.joda.time.DateTime,
    adjournedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  case class MeetingForm(
    scheduledAt: _root_.org.joda.time.DateTime
  )

  /**
   * Used to enable pagination when walking through the issues in a particular
   * meeting. General idea is given a meeting id and an incident id, returns the
   * previous and next incident IDs, if any
   */
  case class MeetingPager(
    meeting: com.gilt.quality.v0.models.Meeting,
    priorIncident: _root_.scala.Option[com.gilt.quality.v0.models.Incident] = None,
    nextIncident: _root_.scala.Option[com.gilt.quality.v0.models.Incident] = None
  )

  /**
   * Top level organization for which we are managing quality. Key entities like
   * teams and meetings are scoped to the organization.
   */
  case class Organization(
    key: String,
    name: String
  )

  case class OrganizationForm(
    name: String,
    key: _root_.scala.Option[String] = None
  )

  /**
   * Details for how an incident will be resolved
   */
  case class Plan(
    id: Long,
    incidentId: Long,
    body: String,
    grade: _root_.scala.Option[Int] = None,
    createdAt: _root_.org.joda.time.DateTime
  )

  case class PlanForm(
    incidentId: Long,
    body: String
  )

  /**
   * Statistics on each team's quality metrics, number of issues
   */
  case class Statistic(
    team: com.gilt.quality.v0.models.Team,
    totalGrades: Long,
    averageGrade: _root_.scala.Option[Int] = None,
    totalOpenIncidents: Long,
    totalIncidents: Long,
    totalPlans: Long,
    plans: _root_.scala.Option[Seq[com.gilt.quality.v0.models.Plan]] = None
  )

  /**
   * Represents a user that is currently subscribed to a publication
   */
  case class Subscription(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    user: com.gilt.quality.v0.models.User,
    publication: com.gilt.quality.v0.models.Publication
  )

  case class SubscriptionForm(
    organizationKey: String,
    userGuid: _root_.java.util.UUID,
    publication: com.gilt.quality.v0.models.Publication
  )

  /**
   * A team is the main actor in the system. Teams have a unique key and own
   * incidents
   */
  case class Team(
    organization: com.gilt.quality.v0.models.Organization,
    key: String,
    email: _root_.scala.Option[String] = None,
    icons: com.gilt.quality.v0.models.Icons
  )

  case class TeamForm(
    key: String,
    email: _root_.scala.Option[String] = None,
    smileyUrl: _root_.scala.Option[String] = None,
    frownyUrl: _root_.scala.Option[String] = None
  )

  case class TeamMember(
    team: com.gilt.quality.v0.models.Team,
    user: com.gilt.quality.v0.models.User
  )

  /**
   * Statistics on each team's quality metrics, number of issues
   */
  case class TeamMemberSummary(
    team: com.gilt.quality.v0.models.Team,
    numberMembers: Long
  )

  case class UpdateTeamForm(
    email: _root_.scala.Option[String] = None,
    smileyUrl: _root_.scala.Option[String] = None,
    frownyUrl: _root_.scala.Option[String] = None
  )

  /**
   * A user is a top level person.
   */
  case class User(
    guid: _root_.java.util.UUID,
    email: String
  )

  case class UserForm(
    email: String
  )

  /**
   * An external service with which an organization can integrate.
   */
  sealed trait ExternalServiceName

  object ExternalServiceName {

    /**
     * Atlassian JIRA. If integration is enabled, an incident can be created by listing
     * the jira ISSUE number directly.
     */
    case object Jira extends ExternalServiceName { override def toString = "jira" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ExternalServiceName

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Jira)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExternalServiceName = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExternalServiceName] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to. An example
   * would be subscribing via email to the publication of all new incidents.
   */
  sealed trait Publication

  object Publication {

    /**
     * Email notification whenever an incident is created.
     */
    case object IncidentsCreate extends Publication { override def toString = "incidents.create" }
    /**
     * Email notification whenever an incident is updated.
     */
    case object IncidentsUpdate extends Publication { override def toString = "incidents.update" }
    /**
     * Email notification whenever a plan is created.
     */
    case object PlansCreate extends Publication { override def toString = "plans.create" }
    /**
     * Email notification whenever a plan is updated.
     */
    case object PlansUpdate extends Publication { override def toString = "plans.update" }
    /**
     * Email notification whenever a meeting is adjourned.
     */
    case object MeetingsAdjourned extends Publication { override def toString = "meetings.adjourned" }
    /**
     * Email notification whenever a team that you are on is assigned to an incident.
     */
    case object IncidentsTeamUpdate extends Publication { override def toString = "incidents.team_update" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(IncidentsCreate, IncidentsUpdate, PlansCreate, PlansUpdate, MeetingsAdjourned, IncidentsTeamUpdate)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  sealed trait Response

  object Response {

    case object Complete extends Response { override def toString = "Complete" }
    case object NotYet extends Response { override def toString = "Not Yet" }
    case object Willnotcomplete extends Response { override def toString = "Will not complete" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Response

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Complete, NotYet, Willnotcomplete)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Response = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Response] = byName.get(value.toLowerCase)

  }

  sealed trait Severity

  object Severity {

    case object Low extends Severity { override def toString = "low" }
    case object High extends Severity { override def toString = "high" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Severity

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Low, High)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Severity = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Severity] = byName.get(value.toLowerCase)

  }

  /**
   * Describes what needs to be reviewed about a specific incident
   */
  sealed trait Task

  object Task {

    /**
     * Used in meetings to indicate that a team should be assigned to the incident or
     * that the group should review the team assignment to make sure it is correct.
     */
    case object ReviewTeam extends Task { override def toString = "review_team" }
    /**
     * Indicates that the incident plan should be reviewed and rated
     */
    case object ReviewPlan extends Task { override def toString = "review_plan" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Task

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(ReviewTeam, ReviewPlan)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Task = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Task] = byName.get(value.toLowerCase)

  }

}

package com.gilt.quality.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import org.joda.time.format.DateTimeFormat
    import org.joda.time.format.DateTimeFormatterBuilder
    import com.gilt.quality.v0.models.json._

    private[v0] val DateTimeFormatter =
      new DateTimeFormatterBuilder().append(
        org.joda.time.format.ISODateTimeFormat.dateTime.getPrinter,
        Array(
          DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ssZZ").getParser,
          DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZZ").getParser
        )
      ).toFormatter

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      DateTimeFormatter.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        val str = DateTimeFormatter.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsQualityExternalServiceName = __.read[String].map(ExternalServiceName.apply)
    implicit val jsonWritesQualityExternalServiceName = new Writes[ExternalServiceName] {
      def writes(x: ExternalServiceName) = JsString(x.toString)
    }

    implicit val jsonReadsQualityPublication = __.read[String].map(Publication.apply)
    implicit val jsonWritesQualityPublication = new Writes[Publication] {
      def writes(x: Publication) = JsString(x.toString)
    }

    implicit val jsonReadsQualityResponse = __.read[String].map(Response.apply)
    implicit val jsonWritesQualityResponse = new Writes[Response] {
      def writes(x: Response) = JsString(x.toString)
    }

    implicit val jsonReadsQualitySeverity = __.read[String].map(Severity.apply)
    implicit val jsonWritesQualitySeverity = new Writes[Severity] {
      def writes(x: Severity) = JsString(x.toString)
    }

    implicit val jsonReadsQualityTask = __.read[String].map(Task.apply)
    implicit val jsonWritesQualityTask = new Writes[Task] {
      def writes(x: Task) = JsString(x.toString)
    }

    object AdjournFormFields {
      val adjourned_at = "adjourned_at"
    }

    implicit def jsonReadsQualityAdjournForm: play.api.libs.json.Reads[AdjournForm] = new play.api.libs.json.Reads[AdjournForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (__ \ AdjournFormFields.adjourned_at).readNullable[_root_.org.joda.time.DateTime].map { x => new AdjournForm(adjournedAt = x) }.reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityAdjournForm: play.api.libs.json.Writes[AdjournForm] = new play.api.libs.json.Writes[AdjournForm] {
      def writes(x: AdjournForm) = play.api.libs.json.Json.obj(
        "adjourned_at" -> play.api.libs.json.Json.toJson(x.adjournedAt)
      )
    }

    object AgendaItemFields {
      val id = "id"
      val meeting = "meeting"
      val incident = "incident"
      val task = "task"
    }

    implicit def jsonReadsQualityAgendaItem: play.api.libs.json.Reads[AgendaItem] = new play.api.libs.json.Reads[AgendaItem] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ AgendaItemFields.id).read[Long] and
            (__ \ AgendaItemFields.meeting).read[com.gilt.quality.v0.models.Meeting] and
            (__ \ AgendaItemFields.incident).read[com.gilt.quality.v0.models.Incident] and
            (__ \ AgendaItemFields.task).read[com.gilt.quality.v0.models.Task]
          )(AgendaItem.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityAgendaItem: play.api.libs.json.Writes[AgendaItem] = {
      (
        (__ \ AgendaItemFields.id).write[Long] and
        (__ \ AgendaItemFields.meeting).write[com.gilt.quality.v0.models.Meeting] and
        (__ \ AgendaItemFields.incident).write[com.gilt.quality.v0.models.Incident] and
        (__ \ AgendaItemFields.task).write[com.gilt.quality.v0.models.Task]
      )(unlift(AgendaItem.unapply _))
    }

    object AgendaItemFormFields {
      val meeting_id = "meeting_id"
      val incident_id = "incident_id"
      val task = "task"
    }

    implicit def jsonReadsQualityAgendaItemForm: play.api.libs.json.Reads[AgendaItemForm] = new play.api.libs.json.Reads[AgendaItemForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ AgendaItemFormFields.meeting_id).read[Long] and
            (__ \ AgendaItemFormFields.incident_id).read[Long] and
            (__ \ AgendaItemFormFields.task).read[com.gilt.quality.v0.models.Task]
          )(AgendaItemForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityAgendaItemForm: play.api.libs.json.Writes[AgendaItemForm] = {
      (
        (__ \ AgendaItemFormFields.meeting_id).write[Long] and
        (__ \ AgendaItemFormFields.incident_id).write[Long] and
        (__ \ AgendaItemFormFields.task).write[com.gilt.quality.v0.models.Task]
      )(unlift(AgendaItemForm.unapply _))
    }

    object AuthenticationFormFields {
      val email = "email"
    }

    implicit def jsonReadsQualityAuthenticationForm: play.api.libs.json.Reads[AuthenticationForm] = new play.api.libs.json.Reads[AuthenticationForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (__ \ AuthenticationFormFields.email).read[String].map { x => new AuthenticationForm(email = x) }.reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityAuthenticationForm: play.api.libs.json.Writes[AuthenticationForm] = new play.api.libs.json.Writes[AuthenticationForm] {
      def writes(x: AuthenticationForm) = play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.Json.toJson(x.email)
      )
    }

    object EmailMessageFields {
      val subject = "subject"
      val body = "body"
    }

    implicit def jsonReadsQualityEmailMessage: play.api.libs.json.Reads[EmailMessage] = new play.api.libs.json.Reads[EmailMessage] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ EmailMessageFields.subject).read[String] and
            (__ \ EmailMessageFields.body).read[String]
          )(EmailMessage.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityEmailMessage: play.api.libs.json.Writes[EmailMessage] = {
      (
        (__ \ EmailMessageFields.subject).write[String] and
        (__ \ EmailMessageFields.body).write[String]
      )(unlift(EmailMessage.unapply _))
    }

    object ErrorFields {
      val code = "code"
      val message = "message"
    }

    implicit def jsonReadsQualityError: play.api.libs.json.Reads[Error] = new play.api.libs.json.Reads[Error] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ ErrorFields.code).read[String] and
            (__ \ ErrorFields.message).read[String]
          )(Error.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityError: play.api.libs.json.Writes[Error] = {
      (
        (__ \ ErrorFields.code).write[String] and
        (__ \ ErrorFields.message).write[String]
      )(unlift(Error.unapply _))
    }

    object ExternalServiceFields {
      val id = "id"
      val organization = "organization"
      val name = "name"
      val url = "url"
      val username = "username"
    }

    implicit def jsonReadsQualityExternalService: play.api.libs.json.Reads[ExternalService] = new play.api.libs.json.Reads[ExternalService] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ ExternalServiceFields.id).read[Long] and
            (__ \ ExternalServiceFields.organization).read[com.gilt.quality.v0.models.Organization] and
            (__ \ ExternalServiceFields.name).read[com.gilt.quality.v0.models.ExternalServiceName] and
            (__ \ ExternalServiceFields.url).read[String] and
            (__ \ ExternalServiceFields.username).read[String]
          )(ExternalService.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityExternalService: play.api.libs.json.Writes[ExternalService] = {
      (
        (__ \ ExternalServiceFields.id).write[Long] and
        (__ \ ExternalServiceFields.organization).write[com.gilt.quality.v0.models.Organization] and
        (__ \ ExternalServiceFields.name).write[com.gilt.quality.v0.models.ExternalServiceName] and
        (__ \ ExternalServiceFields.url).write[String] and
        (__ \ ExternalServiceFields.username).write[String]
      )(unlift(ExternalService.unapply _))
    }

    object ExternalServiceFormFields {
      val name = "name"
      val url = "url"
      val username = "username"
      val password = "password"
    }

    implicit def jsonReadsQualityExternalServiceForm: play.api.libs.json.Reads[ExternalServiceForm] = new play.api.libs.json.Reads[ExternalServiceForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ ExternalServiceFormFields.name).read[com.gilt.quality.v0.models.ExternalServiceName] and
            (__ \ ExternalServiceFormFields.url).read[String] and
            (__ \ ExternalServiceFormFields.username).read[String] and
            (__ \ ExternalServiceFormFields.password).read[String]
          )(ExternalServiceForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityExternalServiceForm: play.api.libs.json.Writes[ExternalServiceForm] = {
      (
        (__ \ ExternalServiceFormFields.name).write[com.gilt.quality.v0.models.ExternalServiceName] and
        (__ \ ExternalServiceFormFields.url).write[String] and
        (__ \ ExternalServiceFormFields.username).write[String] and
        (__ \ ExternalServiceFormFields.password).write[String]
      )(unlift(ExternalServiceForm.unapply _))
    }

    object FollowupFields {
      val key = "key"
      val plan = "plan"
      val sent_at = "sent_at"
    }

    implicit def jsonReadsQualityFollowup: play.api.libs.json.Reads[Followup] = new play.api.libs.json.Reads[Followup] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ FollowupFields.key).read[String] and
            (__ \ FollowupFields.plan).read[com.gilt.quality.v0.models.Plan] and
            (__ \ FollowupFields.sent_at).read[_root_.org.joda.time.DateTime]
          )(Followup.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityFollowup: play.api.libs.json.Writes[Followup] = {
      (
        (__ \ FollowupFields.key).write[String] and
        (__ \ FollowupFields.plan).write[com.gilt.quality.v0.models.Plan] and
        (__ \ FollowupFields.sent_at).write[_root_.org.joda.time.DateTime]
      )(unlift(Followup.unapply _))
    }

    object FollowupResponseFields {
      val followup = "followup"
      val response = "response"
      val created_at = "created_at"
      val created_by = "created_by"
    }

    implicit def jsonReadsQualityFollowupResponse: play.api.libs.json.Reads[FollowupResponse] = new play.api.libs.json.Reads[FollowupResponse] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ FollowupResponseFields.followup).read[com.gilt.quality.v0.models.Followup] and
            (__ \ FollowupResponseFields.response).read[com.gilt.quality.v0.models.Response] and
            (__ \ FollowupResponseFields.created_at).read[_root_.org.joda.time.DateTime] and
            (__ \ FollowupResponseFields.created_by).read[com.gilt.quality.v0.models.User]
          )(FollowupResponse.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityFollowupResponse: play.api.libs.json.Writes[FollowupResponse] = {
      (
        (__ \ FollowupResponseFields.followup).write[com.gilt.quality.v0.models.Followup] and
        (__ \ FollowupResponseFields.response).write[com.gilt.quality.v0.models.Response] and
        (__ \ FollowupResponseFields.created_at).write[_root_.org.joda.time.DateTime] and
        (__ \ FollowupResponseFields.created_by).write[com.gilt.quality.v0.models.User]
      )(unlift(FollowupResponse.unapply _))
    }

    object HealthcheckFields {
      val status = "status"
    }

    implicit def jsonReadsQualityHealthcheck: play.api.libs.json.Reads[Healthcheck] = new play.api.libs.json.Reads[Healthcheck] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (__ \ HealthcheckFields.status).read[String].map { x => new Healthcheck(status = x) }.reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityHealthcheck: play.api.libs.json.Writes[Healthcheck] = new play.api.libs.json.Writes[Healthcheck] {
      def writes(x: Healthcheck) = play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.Json.toJson(x.status)
      )
    }

    object IconsFields {
      val smiley_url = "smiley_url"
      val frowny_url = "frowny_url"
    }

    implicit def jsonReadsQualityIcons: play.api.libs.json.Reads[Icons] = new play.api.libs.json.Reads[Icons] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ IconsFields.smiley_url).read[String] and
            (__ \ IconsFields.frowny_url).read[String]
          )(Icons.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityIcons: play.api.libs.json.Writes[Icons] = {
      (
        (__ \ IconsFields.smiley_url).write[String] and
        (__ \ IconsFields.frowny_url).write[String]
      )(unlift(Icons.unapply _))
    }

    object IncidentFields {
      val id = "id"
      val organization = "organization"
      val summary = "summary"
      val description = "description"
      val team = "team"
      val severity = "severity"
      val tags = "tags"
      val plan = "plan"
      val created_at = "created_at"
    }

    implicit def jsonReadsQualityIncident: play.api.libs.json.Reads[Incident] = new play.api.libs.json.Reads[Incident] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ IncidentFields.id).read[Long] and
            (__ \ IncidentFields.organization).read[com.gilt.quality.v0.models.Organization] and
            (__ \ IncidentFields.summary).read[String] and
            (__ \ IncidentFields.description).readNullable[String] and
            (__ \ IncidentFields.team).readNullable[com.gilt.quality.v0.models.Team] and
            (__ \ IncidentFields.severity).read[com.gilt.quality.v0.models.Severity] and
            (__ \ IncidentFields.tags).readNullable[Seq[String]] and
            (__ \ IncidentFields.plan).readNullable[com.gilt.quality.v0.models.Plan] and
            (__ \ IncidentFields.created_at).read[_root_.org.joda.time.DateTime]
          )(Incident.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityIncident: play.api.libs.json.Writes[Incident] = {
      (
        (__ \ IncidentFields.id).write[Long] and
        (__ \ IncidentFields.organization).write[com.gilt.quality.v0.models.Organization] and
        (__ \ IncidentFields.summary).write[String] and
        (__ \ IncidentFields.description).writeNullable[String] and
        (__ \ IncidentFields.team).writeNullable[com.gilt.quality.v0.models.Team] and
        (__ \ IncidentFields.severity).write[com.gilt.quality.v0.models.Severity] and
        (__ \ IncidentFields.tags).writeNullable[Seq[String]] and
        (__ \ IncidentFields.plan).writeNullable[com.gilt.quality.v0.models.Plan] and
        (__ \ IncidentFields.created_at).write[_root_.org.joda.time.DateTime]
      )(unlift(Incident.unapply _))
    }

    object IncidentFormFields {
      val team_key = "team_key"
      val severity = "severity"
      val summary = "summary"
      val description = "description"
      val tags = "tags"
    }

    implicit def jsonReadsQualityIncidentForm: play.api.libs.json.Reads[IncidentForm] = new play.api.libs.json.Reads[IncidentForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ IncidentFormFields.team_key).readNullable[String] and
            (__ \ IncidentFormFields.severity).read[com.gilt.quality.v0.models.Severity] and
            (__ \ IncidentFormFields.summary).read[String] and
            (__ \ IncidentFormFields.description).readNullable[String] and
            (__ \ IncidentFormFields.tags).readNullable[Seq[String]]
          )(IncidentForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityIncidentForm: play.api.libs.json.Writes[IncidentForm] = {
      (
        (__ \ IncidentFormFields.team_key).writeNullable[String] and
        (__ \ IncidentFormFields.severity).write[com.gilt.quality.v0.models.Severity] and
        (__ \ IncidentFormFields.summary).write[String] and
        (__ \ IncidentFormFields.description).writeNullable[String] and
        (__ \ IncidentFormFields.tags).writeNullable[Seq[String]]
      )(unlift(IncidentForm.unapply _))
    }

    object IncidentOrganizationChangeFields {
      val incident_id = "incident_id"
      val organization_key = "organization_key"
    }

    implicit def jsonReadsQualityIncidentOrganizationChange: play.api.libs.json.Reads[IncidentOrganizationChange] = new play.api.libs.json.Reads[IncidentOrganizationChange] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ IncidentOrganizationChangeFields.incident_id).read[Long] and
            (__ \ IncidentOrganizationChangeFields.organization_key).read[String]
          )(IncidentOrganizationChange.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityIncidentOrganizationChange: play.api.libs.json.Writes[IncidentOrganizationChange] = {
      (
        (__ \ IncidentOrganizationChangeFields.incident_id).write[Long] and
        (__ \ IncidentOrganizationChangeFields.organization_key).write[String]
      )(unlift(IncidentOrganizationChange.unapply _))
    }

    object IncidentSummaryFields {
      val id = "id"
      val severity = "severity"
      val summary = "summary"
    }

    implicit def jsonReadsQualityIncidentSummary: play.api.libs.json.Reads[IncidentSummary] = new play.api.libs.json.Reads[IncidentSummary] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ IncidentSummaryFields.id).read[Long] and
            (__ \ IncidentSummaryFields.severity).read[com.gilt.quality.v0.models.Severity] and
            (__ \ IncidentSummaryFields.summary).read[String]
          )(IncidentSummary.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityIncidentSummary: play.api.libs.json.Writes[IncidentSummary] = {
      (
        (__ \ IncidentSummaryFields.id).write[Long] and
        (__ \ IncidentSummaryFields.severity).write[com.gilt.quality.v0.models.Severity] and
        (__ \ IncidentSummaryFields.summary).write[String]
      )(unlift(IncidentSummary.unapply _))
    }

    object MeetingFields {
      val id = "id"
      val organization = "organization"
      val scheduled_at = "scheduled_at"
      val adjourned_at = "adjourned_at"
    }

    implicit def jsonReadsQualityMeeting: play.api.libs.json.Reads[Meeting] = new play.api.libs.json.Reads[Meeting] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ MeetingFields.id).read[Long] and
            (__ \ MeetingFields.organization).read[com.gilt.quality.v0.models.Organization] and
            (__ \ MeetingFields.scheduled_at).read[_root_.org.joda.time.DateTime] and
            (__ \ MeetingFields.adjourned_at).readNullable[_root_.org.joda.time.DateTime]
          )(Meeting.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityMeeting: play.api.libs.json.Writes[Meeting] = {
      (
        (__ \ MeetingFields.id).write[Long] and
        (__ \ MeetingFields.organization).write[com.gilt.quality.v0.models.Organization] and
        (__ \ MeetingFields.scheduled_at).write[_root_.org.joda.time.DateTime] and
        (__ \ MeetingFields.adjourned_at).writeNullable[_root_.org.joda.time.DateTime]
      )(unlift(Meeting.unapply _))
    }

    object MeetingFormFields {
      val scheduled_at = "scheduled_at"
    }

    implicit def jsonReadsQualityMeetingForm: play.api.libs.json.Reads[MeetingForm] = new play.api.libs.json.Reads[MeetingForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (__ \ MeetingFormFields.scheduled_at).read[_root_.org.joda.time.DateTime].map { x => new MeetingForm(scheduledAt = x) }.reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityMeetingForm: play.api.libs.json.Writes[MeetingForm] = new play.api.libs.json.Writes[MeetingForm] {
      def writes(x: MeetingForm) = play.api.libs.json.Json.obj(
        "scheduled_at" -> play.api.libs.json.Json.toJson(x.scheduledAt)
      )
    }

    object MeetingPagerFields {
      val meeting = "meeting"
      val prior_incident = "prior_incident"
      val next_incident = "next_incident"
    }

    implicit def jsonReadsQualityMeetingPager: play.api.libs.json.Reads[MeetingPager] = new play.api.libs.json.Reads[MeetingPager] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ MeetingPagerFields.meeting).read[com.gilt.quality.v0.models.Meeting] and
            (__ \ MeetingPagerFields.prior_incident).readNullable[com.gilt.quality.v0.models.Incident] and
            (__ \ MeetingPagerFields.next_incident).readNullable[com.gilt.quality.v0.models.Incident]
          )(MeetingPager.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityMeetingPager: play.api.libs.json.Writes[MeetingPager] = {
      (
        (__ \ MeetingPagerFields.meeting).write[com.gilt.quality.v0.models.Meeting] and
        (__ \ MeetingPagerFields.prior_incident).writeNullable[com.gilt.quality.v0.models.Incident] and
        (__ \ MeetingPagerFields.next_incident).writeNullable[com.gilt.quality.v0.models.Incident]
      )(unlift(MeetingPager.unapply _))
    }

    object OrganizationFields {
      val key = "key"
      val name = "name"
    }

    implicit def jsonReadsQualityOrganization: play.api.libs.json.Reads[Organization] = new play.api.libs.json.Reads[Organization] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ OrganizationFields.key).read[String] and
            (__ \ OrganizationFields.name).read[String]
          )(Organization.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityOrganization: play.api.libs.json.Writes[Organization] = {
      (
        (__ \ OrganizationFields.key).write[String] and
        (__ \ OrganizationFields.name).write[String]
      )(unlift(Organization.unapply _))
    }

    object OrganizationFormFields {
      val name = "name"
      val key = "key"
    }

    implicit def jsonReadsQualityOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = new play.api.libs.json.Reads[OrganizationForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ OrganizationFormFields.name).read[String] and
            (__ \ OrganizationFormFields.key).readNullable[String]
          )(OrganizationForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      (
        (__ \ OrganizationFormFields.name).write[String] and
        (__ \ OrganizationFormFields.key).writeNullable[String]
      )(unlift(OrganizationForm.unapply _))
    }

    object PlanFields {
      val id = "id"
      val incident_id = "incident_id"
      val body = "body"
      val grade = "grade"
      val created_at = "created_at"
    }

    implicit def jsonReadsQualityPlan: play.api.libs.json.Reads[Plan] = new play.api.libs.json.Reads[Plan] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ PlanFields.id).read[Long] and
            (__ \ PlanFields.incident_id).read[Long] and
            (__ \ PlanFields.body).read[String] and
            (__ \ PlanFields.grade).readNullable[Int] and
            (__ \ PlanFields.created_at).read[_root_.org.joda.time.DateTime]
          )(Plan.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityPlan: play.api.libs.json.Writes[Plan] = {
      (
        (__ \ PlanFields.id).write[Long] and
        (__ \ PlanFields.incident_id).write[Long] and
        (__ \ PlanFields.body).write[String] and
        (__ \ PlanFields.grade).writeNullable[Int] and
        (__ \ PlanFields.created_at).write[_root_.org.joda.time.DateTime]
      )(unlift(Plan.unapply _))
    }

    object PlanFormFields {
      val incident_id = "incident_id"
      val body = "body"
    }

    implicit def jsonReadsQualityPlanForm: play.api.libs.json.Reads[PlanForm] = new play.api.libs.json.Reads[PlanForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ PlanFormFields.incident_id).read[Long] and
            (__ \ PlanFormFields.body).read[String]
          )(PlanForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityPlanForm: play.api.libs.json.Writes[PlanForm] = {
      (
        (__ \ PlanFormFields.incident_id).write[Long] and
        (__ \ PlanFormFields.body).write[String]
      )(unlift(PlanForm.unapply _))
    }

    object StatisticFields {
      val team = "team"
      val total_grades = "total_grades"
      val average_grade = "average_grade"
      val total_open_incidents = "total_open_incidents"
      val total_incidents = "total_incidents"
      val total_plans = "total_plans"
      val plans = "plans"
    }

    implicit def jsonReadsQualityStatistic: play.api.libs.json.Reads[Statistic] = new play.api.libs.json.Reads[Statistic] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ StatisticFields.team).read[com.gilt.quality.v0.models.Team] and
            (__ \ StatisticFields.total_grades).read[Long] and
            (__ \ StatisticFields.average_grade).readNullable[Int] and
            (__ \ StatisticFields.total_open_incidents).read[Long] and
            (__ \ StatisticFields.total_incidents).read[Long] and
            (__ \ StatisticFields.total_plans).read[Long] and
            (__ \ StatisticFields.plans).readNullable[Seq[com.gilt.quality.v0.models.Plan]]
          )(Statistic.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityStatistic: play.api.libs.json.Writes[Statistic] = {
      (
        (__ \ StatisticFields.team).write[com.gilt.quality.v0.models.Team] and
        (__ \ StatisticFields.total_grades).write[Long] and
        (__ \ StatisticFields.average_grade).writeNullable[Int] and
        (__ \ StatisticFields.total_open_incidents).write[Long] and
        (__ \ StatisticFields.total_incidents).write[Long] and
        (__ \ StatisticFields.total_plans).write[Long] and
        (__ \ StatisticFields.plans).writeNullable[Seq[com.gilt.quality.v0.models.Plan]]
      )(unlift(Statistic.unapply _))
    }

    object SubscriptionFields {
      val id = "id"
      val organization = "organization"
      val user = "user"
      val publication = "publication"
    }

    implicit def jsonReadsQualitySubscription: play.api.libs.json.Reads[Subscription] = new play.api.libs.json.Reads[Subscription] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ SubscriptionFields.id).read[Long] and
            (__ \ SubscriptionFields.organization).read[com.gilt.quality.v0.models.Organization] and
            (__ \ SubscriptionFields.user).read[com.gilt.quality.v0.models.User] and
            (__ \ SubscriptionFields.publication).read[com.gilt.quality.v0.models.Publication]
          )(Subscription.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualitySubscription: play.api.libs.json.Writes[Subscription] = {
      (
        (__ \ SubscriptionFields.id).write[Long] and
        (__ \ SubscriptionFields.organization).write[com.gilt.quality.v0.models.Organization] and
        (__ \ SubscriptionFields.user).write[com.gilt.quality.v0.models.User] and
        (__ \ SubscriptionFields.publication).write[com.gilt.quality.v0.models.Publication]
      )(unlift(Subscription.unapply _))
    }

    object SubscriptionFormFields {
      val organization_key = "organization_key"
      val user_guid = "user_guid"
      val publication = "publication"
    }

    implicit def jsonReadsQualitySubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = new play.api.libs.json.Reads[SubscriptionForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ SubscriptionFormFields.organization_key).read[String] and
            (__ \ SubscriptionFormFields.user_guid).read[_root_.java.util.UUID] and
            (__ \ SubscriptionFormFields.publication).read[com.gilt.quality.v0.models.Publication]
          )(SubscriptionForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualitySubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      (
        (__ \ SubscriptionFormFields.organization_key).write[String] and
        (__ \ SubscriptionFormFields.user_guid).write[_root_.java.util.UUID] and
        (__ \ SubscriptionFormFields.publication).write[com.gilt.quality.v0.models.Publication]
      )(unlift(SubscriptionForm.unapply _))
    }

    object TeamFields {
      val organization = "organization"
      val key = "key"
      val email = "email"
      val icons = "icons"
    }

    implicit def jsonReadsQualityTeam: play.api.libs.json.Reads[Team] = new play.api.libs.json.Reads[Team] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ TeamFields.organization).read[com.gilt.quality.v0.models.Organization] and
            (__ \ TeamFields.key).read[String] and
            (__ \ TeamFields.email).readNullable[String] and
            (__ \ TeamFields.icons).read[com.gilt.quality.v0.models.Icons]
          )(Team.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityTeam: play.api.libs.json.Writes[Team] = {
      (
        (__ \ TeamFields.organization).write[com.gilt.quality.v0.models.Organization] and
        (__ \ TeamFields.key).write[String] and
        (__ \ TeamFields.email).writeNullable[String] and
        (__ \ TeamFields.icons).write[com.gilt.quality.v0.models.Icons]
      )(unlift(Team.unapply _))
    }

    object TeamFormFields {
      val key = "key"
      val email = "email"
      val smiley_url = "smiley_url"
      val frowny_url = "frowny_url"
    }

    implicit def jsonReadsQualityTeamForm: play.api.libs.json.Reads[TeamForm] = new play.api.libs.json.Reads[TeamForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ TeamFormFields.key).read[String] and
            (__ \ TeamFormFields.email).readNullable[String] and
            (__ \ TeamFormFields.smiley_url).readNullable[String] and
            (__ \ TeamFormFields.frowny_url).readNullable[String]
          )(TeamForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityTeamForm: play.api.libs.json.Writes[TeamForm] = {
      (
        (__ \ TeamFormFields.key).write[String] and
        (__ \ TeamFormFields.email).writeNullable[String] and
        (__ \ TeamFormFields.smiley_url).writeNullable[String] and
        (__ \ TeamFormFields.frowny_url).writeNullable[String]
      )(unlift(TeamForm.unapply _))
    }

    object TeamMemberFields {
      val team = "team"
      val user = "user"
    }

    implicit def jsonReadsQualityTeamMember: play.api.libs.json.Reads[TeamMember] = new play.api.libs.json.Reads[TeamMember] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ TeamMemberFields.team).read[com.gilt.quality.v0.models.Team] and
            (__ \ TeamMemberFields.user).read[com.gilt.quality.v0.models.User]
          )(TeamMember.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityTeamMember: play.api.libs.json.Writes[TeamMember] = {
      (
        (__ \ TeamMemberFields.team).write[com.gilt.quality.v0.models.Team] and
        (__ \ TeamMemberFields.user).write[com.gilt.quality.v0.models.User]
      )(unlift(TeamMember.unapply _))
    }

    object TeamMemberSummaryFields {
      val team = "team"
      val number_members = "number_members"
    }

    implicit def jsonReadsQualityTeamMemberSummary: play.api.libs.json.Reads[TeamMemberSummary] = new play.api.libs.json.Reads[TeamMemberSummary] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ TeamMemberSummaryFields.team).read[com.gilt.quality.v0.models.Team] and
            (__ \ TeamMemberSummaryFields.number_members).read[Long]
          )(TeamMemberSummary.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityTeamMemberSummary: play.api.libs.json.Writes[TeamMemberSummary] = {
      (
        (__ \ TeamMemberSummaryFields.team).write[com.gilt.quality.v0.models.Team] and
        (__ \ TeamMemberSummaryFields.number_members).write[Long]
      )(unlift(TeamMemberSummary.unapply _))
    }

    object UpdateTeamFormFields {
      val email = "email"
      val smiley_url = "smiley_url"
      val frowny_url = "frowny_url"
    }

    implicit def jsonReadsQualityUpdateTeamForm: play.api.libs.json.Reads[UpdateTeamForm] = new play.api.libs.json.Reads[UpdateTeamForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ UpdateTeamFormFields.email).readNullable[String] and
            (__ \ UpdateTeamFormFields.smiley_url).readNullable[String] and
            (__ \ UpdateTeamFormFields.frowny_url).readNullable[String]
          )(UpdateTeamForm.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityUpdateTeamForm: play.api.libs.json.Writes[UpdateTeamForm] = {
      (
        (__ \ UpdateTeamFormFields.email).writeNullable[String] and
        (__ \ UpdateTeamFormFields.smiley_url).writeNullable[String] and
        (__ \ UpdateTeamFormFields.frowny_url).writeNullable[String]
      )(unlift(UpdateTeamForm.unapply _))
    }

    object UserFields {
      val guid = "guid"
      val email = "email"
    }

    implicit def jsonReadsQualityUser: play.api.libs.json.Reads[User] = new play.api.libs.json.Reads[User] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (
            (__ \ UserFields.guid).read[_root_.java.util.UUID] and
            (__ \ UserFields.email).read[String]
          )(User.apply _).reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ UserFields.guid).write[_root_.java.util.UUID] and
        (__ \ UserFields.email).write[String]
      )(unlift(User.unapply _))
    }

    object UserFormFields {
      val email = "email"
    }

    implicit def jsonReadsQualityUserForm: play.api.libs.json.Reads[UserForm] = new play.api.libs.json.Reads[UserForm] {
      def reads(json: play.api.libs.json.JsValue) = {
        try {
          (__ \ UserFormFields.email).read[String].map { x => new UserForm(email = x) }.reads(json)
        } catch {
          // Catch Validation Errors
          case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
        }
      }
    }

    implicit def jsonWritesQualityUserForm: play.api.libs.json.Writes[UserForm] = new play.api.libs.json.Writes[UserForm] {
      def writes(x: UserForm) = play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.Json.toJson(x.email)
      )
    }
  }
}
