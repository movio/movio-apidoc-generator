sealed trait AgeGroup

object AgeGroup {

  case object Twenties extends AgeGroup { override def toString = "twenties" }
  case object Thirties extends AgeGroup { override def toString = "thirties" }

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all = Seq(Twenties, Thirties)

  private[this]
  val byName = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String): AgeGroup = fromString(value).getOrElse(throw new IllegalArgumentException(s"$value is not a valid AgeGroup."))

  def fromString(value: String): _root_.scala.Option[AgeGroup] = byName.get(value.toLowerCase)

}

sealed trait Genre

object Genre {

  case object Classical extends Genre { override def toString = "Classical" }
  case object Jazz extends Genre { override def toString = "Jazz" }

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all = Seq(Classical, Jazz)

  private[this]
  val byName = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String): Genre = fromString(value).getOrElse(throw new IllegalArgumentException(s"$value is not a valid Genre."))

  def fromString(value: String): _root_.scala.Option[Genre] = byName.get(value.toLowerCase)

}
