package test.apidoc.apidoctest.v0.models {

  case class KafkaUser(
    v0: test.apidoc.apidoctest.v0.models.User,
    utcGeneratedTime: _root_.org.joda.time.LocalDateTime = org.joda.time.LocalDateTime.now(org.joda.time.DateTimeZone.UTC)
  ) extends KafkaMessage {

    import Validation._

    def generateKey(tenant: String) = java.util.UUID.randomUUID().toString
  }

  case class User(
    stringMax: String,
    stringMin: String,
    stringMaxList: Seq[String],
    stringMinList: Seq[String],
    intMax: Int,
    longMin: Long,
    dateTime: _root_.org.joda.time.LocalDateTime,
    optionalDateTime: _root_.scala.Option[_root_.org.joda.time.LocalDateTime] = None,
    stringOptionMax: _root_.scala.Option[String] = None
  ) extends com.github.BaseClass {

    import Validation._
    validateMaxLength("stringMax", stringMax, 10)
    validateMinLength("stringMin", stringMin, 11)
    validateMaxSize("stringMaxList", stringMaxList, 12)
    validateMaxLengthOfAll("stringMaxList", stringMaxList, 13)
    validateMinSize("stringMinList", stringMinList, 14)
    validateMinLengthOfAll("stringMinList", stringMinList, 15)
    validateMax("intMax", intMax, 16)
    validateMin("longMin", longMin, 17)
    validateMaxLength("stringOptionMax", stringOptionMax, 18)

  }

  object Validation {

    def validateMaxLength(name: String, value: _root_.scala.Option[String], length: Int): Unit = {
      value foreach { value ⇒
        validateMaxLength(name, value, length)
      }
    }

    def validateMax[T](name: String, value: T, max: T)(implicit n:Numeric[T]): Unit = {
      require(n.lteq(value , max), s"$name must be less than or equal to $max")
    }

    def validateMin[T](name: String, value: T, min: T)(implicit n:Numeric[T]): Unit = {
      require(n.gteq(value , min), s"$name must be greater than or equal to $min")
    }

    def validateMaxSize(name: String, value: Seq[_], size: Int): Unit = {
      require(value.size <= size, s"$name must have less than $size items")
    }

    def validateMinSize(name: String, value: Seq[_], size: Int): Unit = {
      require(value.size >= size, s"$name must have at least $size items")
    }

    def validateMaxLength(name: String, value: String, length: Int): Unit = {
      require(value.codePointCount(0, value.length) <= length, s"$name must be $length characters or less")
    }

    def validateMinLength(name: String, value: String, length: Int): Unit = {
      require(value.codePointCount(0, value.length) >= length, s"$name must be more than $length characters")
    }

    def validateMaxLengthOfAll(name: String, values: _root_.scala.Option[Seq[String]], length: Int): Unit = {
      values foreach { values ⇒
        validateMaxLengthOfAll(name, values, length)
      }
    }

    def validateMaxLengthOfAll(name: String, values: Seq[String], length: Int): Unit = {
      values foreach { value ⇒
        validateMaxLength(name, value, length)
      }
    }

    def validateMinLengthOfAll(name: String, values: _root_.scala.Option[Seq[String]], length: Int): Unit = {
      values foreach { values ⇒
        validateMinLengthOfAll(name, values, length)
      }
    }

    def validateMinLengthOfAll(name: String, values: Seq[String], length: Int): Unit = {
      values foreach { value ⇒
        validateMinLength(name, value, length)
      }
    }

    def validateMaxLengthOfAll[T](name: String, values: Seq[T], max: T)(implicit n: Numeric[T]): Unit = {
      values foreach { value ⇒
        validateMax(name, value, max)
      }
    }

    def validateMinLengthOfAll[T](name: String, values: Seq[T], min: T)(implicit n: Numeric[T]): Unit = {
      values foreach { value ⇒
        validateMin(name, value, min)
      }
    }

    def validateMaxLengthOfAll[T](name: String, values: _root_.scala.Option[Seq[T]], max: T)(implicit n: Numeric[T]): Unit = {
      values foreach { values ⇒
        validateMaxLengthOfAll(name, values, max)
      }
    }

    def validateMinLengthOfAll[T](name: String, values: _root_.scala.Option[Seq[T]], min: T)(implicit n: Numeric[T]): Unit = {
      values foreach { values ⇒
        validateMinLengthOfAll(name, values, min)
      }
    }

    def validateRegex(name: String, value: String, regex: String): Unit = {
      require(regex.r.findFirstIn(value).isDefined, s"$name did not match regex: $regex")
    }

  }


  trait KafkaMessage {

    /**
      A scala statement/code that returns the kafka key to use
      Usually something like `data.exhibitorId`
      */
    def generateKey(tenant: String): String
  }

}
